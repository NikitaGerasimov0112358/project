# Тема 5. Базовые коллекции: строки и списки
Отчет по Теме #5 выполнил(а):
- Герасимов Никита Викторович 
- ПИЭ 22-1

| Задание | Лаб_раб | Сам_раб |
| ------ | ------ | ------ |
| Задание 1 | + | + | 
| Задание 2 | + | + |
| Задание 3 | + | + |
| Задание 4 | + | + |
| Задание 5 | + | + |
| Задание 6 | + | 
| Задание 7 | + | 
| Задание 8 | + | 
| Задание 9 | + | 
| Задание 10 | + |

знак "+" - задание выполнено; знак "-" - задание не выполнено;

Работу проверили:
- к.э.н., доцент Панов М.А.

## Лабораторная работа №1
### Друзья предложили вам поиграть в игру “найди отличия и убери повторения (версия для программистов)”. Суть игры состоит в том, что на вход программы поступает два множества, а ваша задача вывести все элементы первого, которых нет во втором. А вы как раз недавно прошли множества и знаете их возможности, поэтому это не составит для вас труда.

print(2+2)

if __name__ == '__main__':

main()

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen1.jpg)
## Выводы
Код определяет функцию main, которая выполняет простое действие (сложение чисел). Затем, в блоке проверки if __name__ == 'main', происходит вызов этой функции, если скрипт запускается напрямую.

## Лабораторная работа №2
### Напишите две одинаковые программы, только одна будет использовать set(), а вторая frozenset() и попробуйте к исходному множеству добавить несколько элементов, например, через цикл.
def main():

return 2+2

if __name__ == '__main__':

print (main())

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen2.jpg)

## Выводы
Код определяет функцию main, которая возвращает результат сложения чисел. Вызов print(main()) выводит результат функции в консоль.

## Лабораторная работа №3
### На вход в программу поступает список (минимальной длиной 2 символа). Напишите программу, которая будет менять первый и последний элемент списка.def main(one,two):

result = one  + two

return result

for i in range (5):

x = 1

y = 10

answer = main(x,y)

print(answer)

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen3.jpg)

## Выводы
Создается функция main с двумя параметрами, которая складывает их и возвращает результат. Внутри цикла for с диапазоном 5 итераций, функция вызывается с фиксированными значениями параметров, и результат выводится на экран.
  
## Лабораторная работа №4
### На вход в программу поступает список (минимальной длиной 10 символов). Напишите программу, которая выводит элементы с индексами от 2 до 6. В программе необходимо использовать “срез”def main(x, *args):

one = x

two = sum(args)

three =  float(len(args))

print(f"one={one}\ntwo={two}\nthree={three}")

return x + sum(args) / float(len(args))
    
if __name__ == '__main__':

result = main(10,0,1,2,-1,0,-1,1,2)

print(f"\nresult={result}")

### Результа

![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen4.jpg)
## Выводы
Код демонстрирует использование *args для передачи произвольного количества аргументов в функцию. Внутри функции происходит их суммирование и вычисление среднего значения. Также выводятся отдельные переменные.

## Лабораторная работа №5
### Иван задумался о поиске «бесполезного» числа, полученного из списка. Суть поиска в следующем: он берет произвольный список чисел, находит самое большое из них, а затем делит его на длину списка. Студент пока не придумал, где может пригодиться подобное значение, но ищет у вас помощи в реализации такой функции useless().def main(**kwargs):

for i in kwargs.items():

print(i[0], i[1])
    
print()  

for key in kwargs:

print(f"{key} = {kwargs[key]}")

if __name__ == '__main__':

main(x=[1, 2, 3], y=[3, 3, 0], z=[2, 3, 0], q=[3, 3, 0], w=[3, 3, 0])

print()  

main(**{'x': [1, 2, 3], 'y': [3, 3, 0]})

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen5.jpg)

## Выводы
Используется **kwargs для передачи неограниченного количества именованных аргументов в функцию. Внутри функции идет вывод всех переданных пар ключ-значение, с возможностью повторного вызова с передачей готового словаря.

## Лабораторная работа №6
### Ребята не могут определится каким супергероем они хотят стать. У них есть случайно составленный список супергероев, и вы должны определить кто из ребят будет каким супергероем. Необходимо использовать разделение списков.def main(**kwargs):

for i, j in kwargs.items():

print(f"{i}. Mean = {mean(j)}")

def mean(data):

return sum(data) / float(len(data))

if __name__ == '__main__':

main(x=[1, 2, 3], y=[3, 3, 0])

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen6.jpg)

## Выводы
Определена функция main, которая работает с именованными аргументами и выводит их среднее значение с помощью вспомогательной функции mean.

## Лабораторная работа №7
### Вовочка, насмотревшись передачи “Слабое звено” решил написать программу, которая также будет находить самое слабое звено (минимальный элемент) и удалять его, только делать он это хочет не с людьми, а со списком. Помогите Вовочке с реализацией программы. Подсказка: для этого вам необходимо отсортировать список и удалить значение при помощи pop().#### main.py:
from for_important import say_hello

if __name__ == '__main__':

say_hello()

#### for_important.py:

def say_hello():

print('Hello students!')

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen7.jpg)

## Выводы
Файл main.py импортирует и использует функцию say_hello из другого файла (for_important.py). Эта функция выводит приветственное сообщение при запуске скрипта.

## Лабораторная работа №8
### Михаил решил создать большой n-мерный список, для этого он случайным образом создал несколько списков, состоящих минимум из 3, а максимум из 10 элементов и поместил их в один большой список. Он также как и Иван не знает зачем ему это сейчас нужно, но надеется на то, что это пригодится ему в будущем.import math

def main():

value = int(input('Введите значение: '))

print(math.sqrt(value))

print(math.sin(value))

print(math.cos(value))

if __name__ == '__main__':

main()

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen8.jpg)

## Выводы 
В этом коде происходит импорт модуля math и создание функции, которая запрашивает у пользователя ввод числа, затем выводит его квадратный корень, синус и косинус с использованием функций из библиотеки math.

## Лабораторная работа №9
### Вы работаете в ресторане и отвечает за статистику покупок, ваша задача сравнить между собой заказы покупателей, которые указаны в разном порядке. Реализуйте функцию superset(), которая принимает 2 множества. Результат работы функции: вывод в консоль одного из сообщений в зависимости от ситуацииfrom datetime import datetime as dt

from datetime import timedelta as td

def main():

print(f"Сегодня {dt.today().date()}. День недели - {dt.today().isoweekday()}")
    
n = int(input('Введите количество дней: '))

today = dt.today()

result = today + td(days=n)
    
print(f"Через {n} дней будет {result.date()}. День недели - {result.isoweekday()}")

if __name__ == '__main__':

main()
    
### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen9.jpg)

## Выводы
Код использует библиотеку datetime для получения текущей даты и прибавления к ней заданного числа дней. Функция выводит текущую дату, день недели, а также дату и день недели после прибавления введенного количества дней.

## Лабораторная работа №10
###	Предположим, что вам нужно разобрать стопку бумаг, но нужно начать работу с нижней, “переверните стопку”. Вам дан произвольный список. Представьте его в обратном порядке. Программа должна занимать не более двух строк в редакторе кода.def rectangle():

global result

a = float(input("Ширина: "))

b = float(input("Высота: "))

result = a * b

def triangle():

global result

a = float(input("Основание: "))

h = float(input("Высота: "))

result = 0.5 * a * h

figure = input("1 - прямоугольник, 2 - треугольник: ")

if figure == '1':

rectangle()

elif figure == '2':

triangle()

print(f"Площадь: {result}")

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen10.jpg)

## Выводы
Код предлагает пользователю выбрать между прямоугольником и треугольником, после чего запрашивает соответствующие параметры (ширина, высота или основание) и вычисляет площадь выбранной фигуры.

## Самостоятельная работа №1
### Ресторан на предприятии ведет учет посещений за неделю при помощи кода работника. У них есть список со всеми посещениями за неделю. 
checks_list = [
    8734, 2345, 8201, 6621, 9999, 1234, 5678, 8201, 8888, 4321, 3365,
    1478, 9865, 5555, 7777, 9998, 1111, 2222, 3333, 4444, 5556, 6666,
    5410, 7778, 8889, 4445, 1439, 9604, 8201, 3365, 7502, 3016, 4928,
    5837, 8201, 2643, 5017, 9682, 8530, 3250, 7193, 9051, 4506, 1987,
    3365, 5410, 7168, 7777, 8734, 5678, 8201, 4445, 3016, 4506, 4506
]

total_checks = len(checks_list)

unique_visitors = len(set(checks_list))

from collections import Counter
check_counts = Counter(checks_list)
most_frequent_visitor = check_counts.most_common(1)[0]

total_checks, unique_visitors, most_frequent_visitor

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen11.jpg)

## Выводы 
Программа вычисляет и выводит длины векторов, представленных в виде списков, на основе переданных аргументов. Также она измеряет и выводит время выполнения функции.
## Самостоятельная работа №2
### На физкультуре студенты сдавали бег, у преподавателя физкультуры есть список всех результатов, ему нужно узнать
•	Три лучшие результата
•	Три худшие результата
•	Все результаты начиная с 10 

run_results = [
    10.2, 14.8, 19.3, 22.7, 12.5, 33.1, 38.9, 21.6, 26.4, 17.1, 30.2,
    35.7, 16.9, 27.8, 24.5, 16.3, 18.7, 31.9, 12.9, 37.4
]

sorted_results = sorted(run_results)

top_3_results = sorted_results[:3]

bottom_3_results = sorted_results[-3:]

results_starting_from_10 = [time for time in run_results if time >= 10]

print(top_3_results, bottom_3_results, results_starting_from_10)

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen12.jpg)

## Вывод
Программа моделирует бросок игральной кости с шестью гранями. В зависимости от результата броска выводится сообщение о выигрыше, проигрыше или повторном броске. 
 
## Самостоятельная работа №3
### Преподаватель по математике придумал странную задачку. У вас есть три списка с элементами, каждый элемент которых – длина стороны треугольника, ваша задача найти площади двух треугольников, составленные из максимальных и минимальных элементов полученных списков. Результатом выполнения задачи будет: листинг кода, и вывод в консоль, в котором будут указаны два этих значения.import time

import math

one = [12, 25, 3, 48, 71]
two = [5, 18, 40, 62, 98]
three = [4, 21, 37, 56, 84]

max_values = [max(one), max(two), max(three)]
min_values = [min(one), min(two), min(three)]

def triangle_area(a, b, c):
    s = (a + b + c) / 2
    # Area calculation
    return math.sqrt(s * (s - a) * (s - b) * (s - c))

max_triangle_area = triangle_area(*max_values)
min_triangle_area = triangle_area(*min_values)

print(max_triangle_area, min_triangle_area)

### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen13.jpg)

## Вывод
В этой программе создается функция display_current_time(), которая в цикле выводит текущее время с точностью до секунд на протяжении 5 секунд. Используется time.sleep(1), чтобы сделать паузу на 1 секунду между выводами времени.

## Самостоятельная работа №4
### Никто не любит получать плохие оценки, поэтому Борис решил это исправить. Допустим, что все оценки студента за семестр хранятся в одном списке. Ваша задача удалить из этого списка все двойки, а все тройки заменить на четверкиdef calculate_average(*args):

def process_grades(grades):
    return [4 if grade == 3 else grade for grade in grades if grade != 2]

grades_list_1 = [2, 3, 4, 5, 3, 4, 5, 2, 2, 5, 3, 4, 3, 5, 4]
grades_list_2 = [4, 2, 3, 5, 3, 5, 4, 2, 2, 5, 4, 3, 5, 3, 4]
grades_list_3 = [5, 4, 3, 3, 4, 3, 3, 5, 5, 3, 3, 3, 3, 4, 4]

updated_grades_1 = process_grades(grades_list_1)
updated_grades_2 = process_grades(grades_list_2)
updated_grades_3 = process_grades(grades_list_3)

print(updated_grades_1)
print(updated_grades_2)
print(updated_grades_3)


### Результат
![Меню](https://github.com/NikitaGerasimov0112358/project/raw/main/scrin/l4_screen14.jpg)

## Вывод
Реализована функция, которая принимает произвольное количество аргументов и вычисляет их среднее арифметическое. Основная точка входа вызывает эту функцию и выводит результат. 
## Самостоятельная работа №5
###	Вам предоставлены списки натуральных чисел, из них необходимо сформировать множества. При этом следует соблюдать это правило: если какое-либо число повторяется, то преобразовать его в строку по следующему образцу: например, если число 4 повторяется 3 раза, то в множестве будет следующая запись: само число 4, строка «44», строка
«444».

from collections import Counter


# Function to transform the list into a set with the described rule
def list_to_set(lst):
    counts = Counter(lst)
    result_set = set()

    for num, count in counts.items():
        result_set.add(num)  # Add the number itself
        for i in range(2, count + 1):
            result_set.add(str(num) * i)  # Add the repeated number as strings

    return result_set


# Provided lists
list_1 = [1, 1, 3, 3, 1]
list_2 = [5, 5, 5, 5, 5, 5, 5]
list_3 = [2, 2, 1, 2, 2, 5, 6, 7, 1, 3, 2, 2]

# Convert lists to sets
set_1 = list_to_set(list_1)
set_2 = list_to_set(list_2)
set_3 = list_to_set(list_3)

# Output the results
print(set_1)
print(set_2)
print(set_3)


## Вывод
Реализованы два файла: первый вычисляет площадь треугольника по формуле Герона, а второй отвечает за взаимодействие с пользователем, запрашивая у него необходимые данные и выводя результат.

## Общие выводы по теме
Функции позволяют эффективно структурировать код, делая его более читаемым и переиспользуемым. Они принимают аргументы, выполняют операции и возвращают результат, что упрощает реализацию сложных задач. В данной работе мы рассмотрели функции и модули в Python. Мы писали программы, где использовали импорт модулей, создавали функции для математических операций, взаимодействовали с пользователем через ввод данных и вывод результатов(и т.д.).

